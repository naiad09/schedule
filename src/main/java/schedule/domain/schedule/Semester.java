package schedule.domain.schedule;
// Generated 08.05.2016 21:15:35 by Hibernate Tools 4.0.0

import static javax.persistence.GenerationType.IDENTITY;

import java.time.LocalDate;
import java.time.Month;
import java.util.ArrayList;
import java.util.List;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.UniqueConstraint;
import javax.validation.constraints.NotNull;

import schedule.domain.struct.EduProcGraphic;


/**
 * Semester generated by hbm2java
 */
@Entity
@Table(name = "semester", uniqueConstraints = @UniqueConstraint(columnNames = {
		"semester_year", "fall_spring" }))
public class Semester {
	
	@Id
	@GeneratedValue(strategy = IDENTITY)
	@Column(name = "id_semester", unique = true, updatable = false)
	@NotNull
	private int idSemester;
	
	@Column(name = "semester_year", updatable = false)
	@NotNull
	private Integer semesterYear;
	
	@Column(name = "fall_spring", updatable = false)
	@NotNull
	private Boolean fallSpring;
	
	@OneToMany(mappedBy = "semester", fetch = FetchType.LAZY)
	private List<EduProcGraphic> eduProcGraphics = new ArrayList<EduProcGraphic>(
			0);
	
	public int getIdSemester() {
		return idSemester;
	}
	
	public void setIdSemester(int idSemester) {
		this.idSemester = idSemester;
	}
	
	public Integer getSemesterYear() {
		return semesterYear;
	}
	
	public void setSemesterYear(Integer semesterYear) {
		this.semesterYear = semesterYear;
	}
	
	public Boolean getFallSpring() {
		return fallSpring;
	}
	
	public void setFallSpring(Boolean fallSpring) {
		this.fallSpring = fallSpring;
	}
	
	public List<EduProcGraphic> getEduProcGraphics() {
		return eduProcGraphics;
	}
	
	public void setEduProcGraphics(List<EduProcGraphic> eduProcGraphics) {
		this.eduProcGraphics = eduProcGraphics;
	}
	
	public static Semester getCurrentSemester() {
		LocalDate now = LocalDate.now();
		boolean fallSpring;
		int year = now.getYear();
		if (now.isAfter(LocalDate.of(year, Month.AUGUST, 31))
				|| now.isBefore(LocalDate.of(year, Month.JANUARY, 31)))
			fallSpring = true;
		else fallSpring = false;
		
		Semester semester = new Semester();
		semester.semesterYear = year;
		semester.fallSpring = fallSpring;
		return semester;
	}
	
	public static Semester getNextSemester(Semester one) {
		Semester semester = new Semester();
		semester.semesterYear = one.fallSpring ? (one.semesterYear + 1)
				: one.semesterYear;
		semester.fallSpring = !one.fallSpring;
		return semester;
	}
	
	public String toString() {
		return "Semester [idSemester=" + idSemester + ", semesterYear="
				+ semesterYear + ", fallSpring=" + fallSpring
				+ ", eduProcGraphics=" + eduProcGraphics + "]";
	}
	
}
